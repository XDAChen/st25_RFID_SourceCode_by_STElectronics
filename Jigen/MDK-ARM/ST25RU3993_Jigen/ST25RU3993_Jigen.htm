<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\ST25RU3993_Jigen\ST25RU3993_Jigen.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\ST25RU3993_Jigen\ST25RU3993_Jigen.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Aug 21 10:54:28 2019
<BR><P>
<H3>Maximum Stack Usage =      39280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
callInventory6B &rArr; iso6bInventoryRound &rArr; iso6bRead &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">NMI_Handler</a><BR>
 <LI><a href="#[1b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">HardFault_Handler</a><BR>
 <LI><a href="#[1c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">MemManage_Handler</a><BR>
 <LI><a href="#[1d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">BusFault_Handler</a><BR>
 <LI><a href="#[1e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">UsageFault_Handler</a><BR>
 <LI><a href="#[1f]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">SVC_Handler</a><BR>
 <LI><a href="#[20]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DebugMon_Handler</a><BR>
 <LI><a href="#[21]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">PendSV_Handler</a><BR>
 <LI><a href="#[35]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[f6]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f6]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ADC1_2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[52]">ADC3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1d]">BusFault_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[37]">CAN1_RX0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[38]">CAN1_RX1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[39]">CAN1_SCE_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[36]">CAN1_TX_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[63]">COMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[60]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[61]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[62]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4d]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel2_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[30]">DMA1_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[31]">DMA1_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[32]">DMA1_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[33]">DMA1_Channel6_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[34]">DMA1_Channel7_IRQHandler</a> from stm32l4xx_it.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[67]">DMA2_Channel6_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[68]">DMA2_Channel7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[20]">DebugMon_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[29]">EXTI0_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4b]">EXTI15_10_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2a]">EXTI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2b]">EXTI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2c]">EXTI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[2d]">EXTI4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3a]">EXTI9_5_IRQHandler</a> from stm32l4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[27]">FLASH_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[53]">FMC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[73]">FPU_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1b]">HardFault_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6c]">I2C3_ER_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6b]">I2C3_EV_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[71]">LCD_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[64]">LPTIM1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[65]">LPTIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[69]">LPUART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1c]">MemManage_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1a]">NMI_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[24]">PVD_PVM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[21]">PendSV_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6a]">QUADSPI_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[28]">RCC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[72]">RNG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4c]">RTC_Alarm_IRQHandler</a> from stm32l4xx_it.o(i.RTC_Alarm_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[26]">RTC_WKUP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[19]">Reset_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6d]">SAI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6e]">SAI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[54]">SDMMC1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[56]">SPI3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[78]">SPI_AbortRx_ISR</a> from stm32l4xx_hal_spi.o(i.SPI_AbortRx_ISR) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Abort)
 <LI><a href="#[77]">SPI_AbortTx_ISR</a> from stm32l4xx_hal_spi.o(i.SPI_AbortTx_ISR) referenced from stm32l4xx_hal_spi.o(i.HAL_SPI_Abort)
 <LI><a href="#[1f]">SVC_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[6f]">SWPMI1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[22]">SysTick_Handler</a> from stm32l4xx_it.o(i.SysTick_Handler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[75]">SystemInit</a> from system_stm32l4xx.o(i.SystemInit) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[25]">TAMP_STAMP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3b]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3e]">TIM1_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3d]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3c]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[3f]">TIM2_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[40]">TIM3_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[41]">TIM4_IRQHandler</a> from stm32l4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[55]">TIM5_IRQHandler</a> from stm32l4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[59]">TIM6_DAC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[5a]">TIM7_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4e]">TIM8_BRK_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[51]">TIM8_CC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[50]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4f]">TIM8_UP_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[70]">TSC_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[57]">UART4_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[58]">UART5_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[79]">UART_DMAAbortOnError</a> from stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[7c]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[7c]">UART_DMAError</a> from stm32l4xx_hal_uart.o(i.UART_DMAError) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[7a]">UART_DMAReceiveCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[7b]">UART_DMARxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[7d]">UART_DMATransmitCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[7e]">UART_DMATxHalfCplt</a> from stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt) referenced from stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
 <LI><a href="#[48]">USART1_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from stm32l4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from stm32l4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[1e]">UsageFault_Handler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[23]">WWDG_IRQHandler</a> from startup_stm32l476xx.o(.text) referenced from startup_stm32l476xx.o(RESET)
 <LI><a href="#[76]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l476xx.o(.text)
 <LI><a href="#[7f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[7f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[1]">callAntennaPower</a> from appl_commands.o(i.callAntennaPower) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[2]">callChangeFreq</a> from appl_commands.o(i.callChangeFreq) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[16]">callConfigGb29768</a> from appl_commands.o(i.callConfigGb29768) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[3]">callConfigGen2</a> from appl_commands.o(i.callConfigGen2) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[14]">callConfigPA</a> from appl_commands.o(i.callConfigPA) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[4]">callConfigTxRx</a> from appl_commands.o(i.callConfigTxRx) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[17]">callEraseTag</a> from appl_commands.o(i.callEraseTag) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[12]">callGenericCommand</a> from appl_commands.o(i.callGenericCommand) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[e]">callGetSetTuning</a> from appl_commands.o(i.callGetSetTuning) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[f]">callInventory6B</a> from appl_commands.o(i.callInventory6B) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[5]">callInventoryData</a> from appl_commands.o(i.callInventoryData) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[15]">callInventoryParams</a> from appl_commands.o(i.callInventoryParams) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[a]">callKillTag</a> from appl_commands.o(i.callKillTag) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[9]">callLockUnlockTag</a> from appl_commands.o(i.callLockUnlockTag) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[13]">callRSSIMeasureCMD</a> from appl_commands.o(i.callRSSIMeasureCMD) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[8]">callReadFromTag</a> from appl_commands.o(i.callReadFromTag) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[10]">callReadFromTag6B</a> from appl_commands.o(i.callReadFromTag6B) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[0]">callReaderConfig</a> from appl_commands.o(i.callReaderConfig) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[6]">callSelectTag</a> from appl_commands.o(i.callSelectTag) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[b]">callStartStop</a> from appl_commands.o(i.callStartStop) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[c]">callTunerTable</a> from appl_commands.o(i.callTunerTable) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[d]">callTuning</a> from appl_commands.o(i.callTuning) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[7]">callWriteToTag</a> from appl_commands.o(i.callWriteToTag) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[11]">callWriteToTag6B</a> from appl_commands.o(i.callWriteToTag6B) referenced 2 times from appl_commands_table.o(.data)
 <LI><a href="#[18]">callWrongCommand</a> from appl_commands.o(i.callWrongCommand) referenced 16 times from appl_commands_table.o(.data)
 <LI><a href="#[80]">cbGen2TagFound</a> from appl_commands.o(i.cbGen2TagFound) referenced from appl_commands.o(i.inventoryGen2)
 <LI><a href="#[81]">continueCheckTimeout</a> from appl_commands.o(i.continueCheckTimeout) referenced from appl_commands.o(i.inventoryGen2)
 <LI><a href="#[82]">gen2ReadTID</a> from appl_commands.o(i.gen2ReadTID) referenced from appl_commands.o(i.inventoryGen2)
 <LI><a href="#[83]">iso6bSendFail</a> from iso6b.o(i.iso6bSendFail) referenced from iso6b.o(i.iso6bInventoryRound)
 <LI><a href="#[85]">iso6bSendResend</a> from iso6b.o(i.iso6bSendResend) referenced from iso6b.o(i.iso6bInventoryRound)
 <LI><a href="#[84]">iso6bSendSuccess</a> from iso6b.o(i.iso6bSendSuccess) referenced from iso6b.o(i.iso6bInventoryRound)
 <LI><a href="#[74]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[76]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[1dd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[86]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1de]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1df]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1e2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l476xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1be]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomizeFrequencies
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudoRandomContinuousModulation
</UL>

<P><STRONG><a name="[1e3]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderEnterAndReset
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTagGen2
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTxFlush
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTx
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNextPacket
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNBytes
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxBufferDirect
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxRead
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamTransmit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>

<P><STRONG><a name="[152]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDefaultTuningTable
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbGen2TagFound
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaceTuningTable
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Select
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventoryParams
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInitialize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerInitialize
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTunedFrequencies
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[135]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderEnterAndReset
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderCheck
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[136]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTagMemGen2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderCheck
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerMultiHillClimb
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[1e8]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerMultiHillClimb
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ea]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1eb]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>

<P><STRONG><a name="[91]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[95]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[93]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9c]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[87]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ed]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>FLASH_FlushCaches</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a8]"></a>FLASH_PageErase</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_PageErase))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32l4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[d0]"></a>HAL_DMA_Abort</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>HAL_DMA_Init</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a3]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32l4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[a5]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32l4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashProgram64Bit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashErasePage
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;killTagGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etsiModeContinuousModulation
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ResetDoNotPreserveRegisters
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[a6]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, stm32l4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_MassErase
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PageErase
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashErasePage
</UL>

<P><STRONG><a name="[172]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashProgram64Bit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashErasePage
</UL>

<P><STRONG><a name="[aa]"></a>HAL_FLASH_Program</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Fast
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashProgram64Bit
</UL>

<P><STRONG><a name="[171]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashProgram64Bit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashErasePage
</UL>

<P><STRONG><a name="[d7]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 242 bytes, Stack size 36 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>HAL_GPIO_Init</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_InitNormalMode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_InitDirectMode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegisters
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
</UL>

<P><STRONG><a name="[fb]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerStandbyMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callStartStop
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbangIsr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapClen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ResetDoNotPreserveRegisters
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993LockPLL
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUnselect
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSelect
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[a2]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortRx_ISR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[af]"></a>HAL_HalfDuplex_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_HalfDuplex_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_HalfDuplex_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
</UL>

<P><STRONG><a name="[111]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_MspInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32l4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_InitDirectMode
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_InitNormalMode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[139]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderEnterAndReset
</UL>

<P><STRONG><a name="[114]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10d]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr_ex.o(i.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[113]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l4xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 924 bytes, Stack size 40 bytes, stm32l4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[115]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[11d]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayInitialize
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1114 bytes, Stack size 32 bytes, stm32l4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RTC_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[cf]"></a>HAL_SPI_Abort</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Abort &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_SPI_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>

<P><STRONG><a name="[d4]"></a>HAL_SPI_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_SPI_MspDeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, spi.o(i.HAL_SPI_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_DeInit
</UL>

<P><STRONG><a name="[d5]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 554 bytes, Stack size 40 bytes, stm32l4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>

<P><STRONG><a name="[116]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[db]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[da]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32l4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbangTimerStart
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbangTimerStop
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; bitbangIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; bitbangIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbangIsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_UART_GetState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTxFlush
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNextPacket
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxBufferDirect
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInitialize
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerInitialize
</UL>

<P><STRONG><a name="[b0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxNextPacket
</UL>

<P><STRONG><a name="[119]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[11a]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[f8]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTxFlush
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTx
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNextPacket
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxBufferDirect
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[11b]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[f9]"></a>MX_DMA_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>MX_GPIO_Init</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>MX_GPIO_InitDirectMode</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_InitDirectMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_GPIO_InitDirectMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortDirect
</UL>

<P><STRONG><a name="[fe]"></a>MX_GPIO_InitNormalMode</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_InitNormalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_InitNormalMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortNormal
</UL>

<P><STRONG><a name="[ff]"></a>MX_RTC_Init</STRONG> (Thumb, 182 bytes, Stack size 80 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_SPI1_DeInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi.o(i.MX_SPI1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_SPI1_DeInit &rArr; HAL_SPI_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortDirect
</UL>

<P><STRONG><a name="[101]"></a>MX_SPI1_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortNormal
</UL>

<P><STRONG><a name="[102]"></a>MX_TIM16_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tim.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>MX_TIM4_Init</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>MX_TIM5_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_HalfDuplex_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[108]"></a>ProcessIO</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stream_dispatcher.o(i.ProcessIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ProcessIO &rArr; processReceivedPackets &rArr; writeRegister &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamTransmit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamReceive
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamReady
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[cc]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l4xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[c7]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l4xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[10f]"></a>StreamDispatcherGetLastError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stream_dispatcher.o(i.StreamDispatcherGetLastError))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamTransmit
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamDispatcherInit
</UL>

<P><STRONG><a name="[10e]"></a>StreamDispatcherInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stream_dispatcher.o(i.StreamDispatcherInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StreamDispatcherInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamInitialize
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamDispatcherGetLastError
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>SystemClock_Config</STRONG> (Thumb, 162 bytes, Stack size 240 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>SystemInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, system_stm32l4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; bitbangIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; bitbangIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32l4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e0]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b2]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b3]"></a>UART_CheckIdleState</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b1]"></a>UART_SetConfig</STRONG> (Thumb, 652 bytes, Stack size 32 bytes, stm32l4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HalfDuplex_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[117]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32l4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l476xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[11e]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f1]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1a3]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTx
</UL>

<P><STRONG><a name="[1f2]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1f3]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[120]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1f4]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1f5]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1f6]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1a4]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTx
</UL>

<P><STRONG><a name="[1f7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12f]"></a>bbRun</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bitbang.o(i.bbRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bbRun
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbangTimerStop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitbangTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSelect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
</UL>

<P><STRONG><a name="[19c]"></a>bbSetup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bitbang.o(i.bbSetup))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bOpen
</UL>

<P><STRONG><a name="[ed]"></a>bitbangIsr</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bitbang.o(i.bitbangIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bitbangIsr
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[130]"></a>bitbangTimerStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.bitbangTimerStart))
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
</UL>

<P><STRONG><a name="[131]"></a>bitbangTimerStop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.bitbangTimerStop))
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
</UL>

<P><STRONG><a name="[134]"></a>bootloaderCheck</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bootloader.o(i.bootloaderCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bootloaderCheck &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>bootloaderEnterAndReset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bootloader.o(i.bootloaderEnterAndReset))
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[18b]"></a>calcCrc16</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, crc.o(i.calcCrc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calcCrc16
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSelect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
</UL>

<P><STRONG><a name="[1]"></a>callAntennaPower</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appl_commands.o(i.callAntennaPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = callAntennaPower &rArr; antennaPower &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>callChangeFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appl_commands.o(i.callChangeFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = callChangeFreq &rArr; changeFreq &rArr; pseudoRandomContinuousModulation &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>callConfigGb29768</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appl_commands.o(i.callConfigGb29768))
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>callConfigGen2</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, appl_commands.o(i.callConfigGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = callConfigGen2 &rArr; checkAndSetSession &rArr; gen2Open &rArr; gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Configure
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>callConfigPA</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, appl_commands.o(i.callConfigPA))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = callConfigPA &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>callConfigTxRx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, appl_commands.o(i.callConfigTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = callConfigTxRx &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetSensitivity
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>callEraseTag</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, appl_commands.o(i.callEraseTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = callEraseTag &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>callGenericCommand</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, appl_commands.o(i.callGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = callGenericCommand &rArr; genericCommand &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>callGetSetTuning</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, appl_commands.o(i.callGetSetTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = callGetSetTuning &rArr; tunerSetCap &rArr; tunerSetCapCout &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>callInventory6B</STRONG> (Thumb, 152 bytes, Stack size 38936 bytes, appl_commands.o(i.callInventory6B))
<BR><BR>[Stack]<UL><LI>Max Depth = 39280<LI>Call Chain = callInventory6B &rArr; iso6bInventoryRound &rArr; iso6bRead &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bOpen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>callInventoryData</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, appl_commands.o(i.callInventoryData))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = callInventoryData &rArr; st25RU3993GetSensitivity &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbGen2TagFound
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>callInventoryParams</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, appl_commands.o(i.callInventoryParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = callInventoryParams
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>callKillTag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appl_commands.o(i.callKillTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = callKillTag &rArr; killTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;killTagGen2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>callLockUnlockTag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appl_commands.o(i.callLockUnlockTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = callLockUnlockTag &rArr; lockUnlockTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>callRSSIMeasureCMD</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appl_commands.o(i.callRSSIMeasureCMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = callRSSIMeasureCMD &rArr; executeRSSICMD &rArr; gen2QueryMeasureRSSI &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeRSSICMD
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>callReadFromTag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appl_commands.o(i.callReadFromTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = callReadFromTag &rArr; readFromTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>callReadFromTag6B</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, appl_commands.o(i.callReadFromTag6B))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = callReadFromTag6B &rArr; checkAndSetSession &rArr; gen2Open &rArr; gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>callReaderConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, appl_commands.o(i.callReaderConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = callReaderConfig &rArr; readerConfig &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>callSelectTag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appl_commands.o(i.callSelectTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = callSelectTag &rArr; checkAndSetSession &rArr; gen2Open &rArr; gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selectTagGen2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>callStartStop</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, appl_commands.o(i.callStartStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = callStartStop
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>callTunerTable</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, appl_commands.o(i.callTunerTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = callTunerTable &rArr; setDefaultTuningTable &rArr; replaceTuningTable
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDefaultTuningTable
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTuningTableToFlash
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToTuningTable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>callTuning</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, appl_commands.o(i.callTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = callTuning &rArr; tuning &rArr; tunerMultiHillClimb &rArr; tunerOneHillClimb &rArr; tunerClimbOneParam &rArr; detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>callWriteToTag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, appl_commands.o(i.callWriteToTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = callWriteToTag &rArr; writeToTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>callWriteToTag6B</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, appl_commands.o(i.callWriteToTag6B))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = callWriteToTag6B &rArr; checkAndSetSession &rArr; gen2Open &rArr; gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>callWrongCommand</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appl_commands.o(i.callWrongCommand))
<BR>[Address Reference Count : 1]<UL><LI> appl_commands_table.o(.data)
</UL>
<P><STRONG><a name="[154]"></a>ceil</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[161]"></a>clearFlashPage</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tuner.o(i.clearFlashPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = clearFlashPage &rArr; flashErasePage &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTuningTableToFlash
</UL>

<P><STRONG><a name="[1bb]"></a>commands</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, appl_commands.o(i.commands))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = commands
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[165]"></a>delayInitialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timer.o(i.delayInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delayInitialize &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[16b]"></a>doContinuousModulation</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, appl_commands.o(i.doContinuousModulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = doContinuousModulation &rArr; pseudoRandomContinuousModulation &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudoRandomContinuousModulation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etsiModeContinuousModulation
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>doCyclicInventory</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, appl_commands.o(i.doCyclicInventory))
<BR><BR>[Stack]<UL><LI>Max Depth = 984<LI>Call Chain = doCyclicInventory &rArr; inventoryGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>doSaveTuningTable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, appl_commands.o(i.doSaveTuningTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = doSaveTuningTable &rArr; saveTuningTableToFlash &rArr; flashProgram64Bit &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTuningTableToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[162]"></a>flashErasePage</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, flash_access.o(i.flashErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flashErasePage &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlashPage
</UL>

<P><STRONG><a name="[173]"></a>flashProgram64Bit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash_access.o(i.flashProgram64Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flashProgram64Bit &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveTuningTableToFlash
</UL>

<P><STRONG><a name="[174]"></a>floor</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[1c0]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomizeFrequencies
</UL>

<P><STRONG><a name="[175]"></a>gen2AccessTag</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, gen2.o(i.gen2AccessTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gen2AccessTag &rArr; gen2ReqRNHandleChar &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReqRNHandleChar
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
</UL>

<P><STRONG><a name="[15e]"></a>gen2Close</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gen2.o(i.gen2Close))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>

<P><STRONG><a name="[13b]"></a>gen2Configure</STRONG> (Thumb, 664 bytes, Stack size 48 bytes, gen2.o(i.gen2Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Open
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigGen2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
</UL>

<P><STRONG><a name="[196]"></a>gen2ConfigureSkipRegAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gen2.o(i.gen2ConfigureSkipRegAccess))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
</UL>

<P><STRONG><a name="[17e]"></a>gen2KillTag</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, gen2.o(i.gen2KillTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = gen2KillTag &rArr; gen2ReqRNHandleChar &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReqRNHandleChar
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;killTagGen2
</UL>

<P><STRONG><a name="[17f]"></a>gen2LockTag</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, gen2.o(i.gen2LockTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = gen2LockTag &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
</UL>

<P><STRONG><a name="[160]"></a>gen2Open</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gen2.o(i.gen2Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = gen2Open &rArr; gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>

<P><STRONG><a name="[170]"></a>gen2QueryMeasureRSSI</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, gen2.o(i.gen2QueryMeasureRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = gen2QueryMeasureRSSI &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2PrepareQueryCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetRssiLin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetAgcRssiLog
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeRSSICMD
</UL>

<P><STRONG><a name="[181]"></a>gen2ReadFromTag</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, gen2.o(i.gen2ReadFromTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = gen2ReadFromTag &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2InsertEBV
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTagMemGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadTID
</UL>

<P><STRONG><a name="[182]"></a>gen2SearchForTags</STRONG> (Thumb, 854 bytes, Stack size 464 bytes, gen2.o(i.gen2SearchForTags))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
</UL>

<P><STRONG><a name="[18a]"></a>gen2Select</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, gen2.o(i.gen2Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gen2Select &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2InsertEBV
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSelectsGen2
</UL>

<P><STRONG><a name="[18c]"></a>gen2WriteWordToTag</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, gen2.o(i.gen2WriteWordToTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gen2WriteWordToTag &rArr; gen2ReqRNHandleChar &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReqRNHandleChar
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2InsertEBV
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTagMemGen2
</UL>

<P><STRONG><a name="[1d0]"></a>getGen2IntConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gen2.o(i.getGen2IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
</UL>

<P><STRONG><a name="[195]"></a>initCommands</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, appl_commands.o(i.initCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = initCommands &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTunedFrequencies
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[1ac]"></a>initializeFrequencies</STRONG> (Thumb, 668 bytes, Stack size 0 bytes, tuner.o(i.initializeFrequencies))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[17d]"></a>insertBitStream</STRONG> (Thumb, 98 bytes, Stack size 28 bytes, global.o(i.insertBitStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = insertBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2InsertEBV
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadFromTag
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2LockTag
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2KillTag
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
</UL>

<P><STRONG><a name="[16d]"></a>inventoryGen2</STRONG> (Thumb, 684 bytes, Stack size 136 bytes, appl_commands.o(i.inventoryGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = inventoryGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamTransmitBuffer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerValue
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ConfigureSkipRegAccess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventoryData
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSelectsGen2
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increaseSensitivity
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decreaseSensitivity
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continueCheckTimeout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIO
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCyclicInventory
</UL>

<P><STRONG><a name="[15f]"></a>iso6bClose</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iso6b.o(i.iso6bClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = iso6bClose &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>

<P><STRONG><a name="[144]"></a>iso6bInventoryRound</STRONG> (Thumb, 422 bytes, Stack size 80 bytes, iso6b.o(i.iso6bInventoryRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = iso6bInventoryRound &rArr; iso6bRead &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSelect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993FifoRead
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitDirectMode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
</UL>

<P><STRONG><a name="[143]"></a>iso6bOpen</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, iso6b.o(i.iso6bOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = iso6bOpen &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbSetup
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
</UL>

<P><STRONG><a name="[149]"></a>iso6bRead</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, iso6b.o(i.iso6bRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = iso6bRead &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPreparePreambleDelimiter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareCRC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareByte
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCrc16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993FifoRead
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitDirectMode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
</UL>

<P><STRONG><a name="[151]"></a>iso6bWrite</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, iso6b.o(i.iso6bWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = iso6bWrite &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPreparePreambleDelimiter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareCRC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareByte
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCrc16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993FifoRead
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitDirectMode
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
</UL>

<P><STRONG><a name="[1a8]"></a>ledTimerStart</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.ledTimerStart))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>loadTuningTablesFromFlash</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, tuner.o(i.loadTuningTablesFromFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = loadTuningTablesFromFlash &rArr; setDefaultTuningTable &rArr; replaceTuningTable
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDefaultTuningTable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[1a1]"></a>loggerInitialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, logger.o(i.loggerInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = loggerInitialize &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[1a2]"></a>loggerTx</STRONG> (Thumb, 140 bytes, Stack size 296 bytes, logger.o(i.loggerTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = loggerTx &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a5]"></a>loggerTxFlush</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, logger.o(i.loggerTxFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = loggerTxFlush &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>main</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = main &rArr; platformInit &rArr; loadTuningTablesFromFlash &rArr; setDefaultTuningTable &rArr; replaceTuningTable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTxFlush
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerTx
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTimerStart
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSaveTuningTable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCyclicInventory
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doContinuousModulation
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderCheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIO
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1bf]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomizeFrequencies
</UL>

<P><STRONG><a name="[1a7]"></a>platformInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, platform.o(i.platformInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = platformInit &rArr; loadTuningTablesFromFlash &rArr; setDefaultTuningTable &rArr; replaceTuningTable
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomizeFrequencies
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCommands
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInitialize
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiInitialize
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTuningTablesFromFlash
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initializeFrequencies
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayInitialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamDispatcherInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loggerInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>randomizeFrequencies</STRONG> (Thumb, 188 bytes, Stack size 240 bytes, tuner.o(i.randomizeFrequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = randomizeFrequencies &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[1ba]"></a>readRegister</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appl_commands.o(i.readRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = readRegister &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[1b9]"></a>readRegisters</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, appl_commands.o(i.readRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = readRegisters &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[1c1]"></a>readU32FromLittleEndianBuffer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, global.o(i.readU32FromLittleEndianBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
</UL>

<P><STRONG><a name="[187]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[12c]"></a>rtcTimerReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timer.o(i.rtcTimerReset))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
</UL>

<P><STRONG><a name="[163]"></a>rtcTimerValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rtcTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etsiModeContinuousModulation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continueCheckTimeout
</UL>

<P><STRONG><a name="[14d]"></a>saveTuningTableToFlash</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tuner.o(i.saveTuningTableToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = saveTuningTableToFlash &rArr; flashProgram64Bit &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashProgram64Bit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlashPage
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTunerTable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doSaveTuningTable
</UL>

<P><STRONG><a name="[14c]"></a>setDefaultTuningTable</STRONG> (Thumb, 216 bytes, Stack size 992 bytes, tuner.o(i.setDefaultTuningTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = setDefaultTuningTable &rArr; replaceTuningTable
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replaceTuningTable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTunerTable
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadTuningTablesFromFlash
</UL>

<P><STRONG><a name="[1c5]"></a>setPortDirect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform.o(i.setPortDirect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setPortDirect &rArr; MX_GPIO_InitDirectMode &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_InitDirectMode
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterDirectMode
</UL>

<P><STRONG><a name="[1c6]"></a>setPortNormal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, platform.o(i.setPortNormal))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = setPortNormal &rArr; MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_InitNormalMode
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitDirectMode
</UL>

<P><STRONG><a name="[1a9]"></a>spiInitialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi_driver.o(i.spiInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[1b5]"></a>spiSelect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_driver.o(i.spiSelect))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>

<P><STRONG><a name="[1b6]"></a>spiTxRx</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi_driver.o(i.spiTxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapClen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCin
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>

<P><STRONG><a name="[1b7]"></a>spiUnselect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_driver.o(i.spiUnselect))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>

<P><STRONG><a name="[128]"></a>st25RU3993AntennaPower</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993AntennaPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerStandbyMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalRfMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeRSSICMD
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etsiModeContinuousModulation
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doContinuousModulation
</UL>

<P><STRONG><a name="[1c8]"></a>st25RU3993CommandContinuousAddress</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, st25ru3993.o(i.st25RU3993CommandContinuousAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993CommandContinuousAddress &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
</UL>

<P><STRONG><a name="[178]"></a>st25RU3993ContinuousRead</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993ContinuousRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetAgcRssiLog
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993IsFrequencyChangeNecessary
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[13e]"></a>st25RU3993ContinuousWrite</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, st25ru3993.o(i.st25RU3993ContinuousWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Configure
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigPA
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[197]"></a>st25RU3993EnterDirectMode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993EnterDirectMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = st25RU3993EnterDirectMode &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortDirect
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
</UL>

<P><STRONG><a name="[1ad]"></a>st25RU3993EnterPowerDownMode</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, st25ru3993.o(i.st25RU3993EnterPowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>

<P><STRONG><a name="[1ae]"></a>st25RU3993EnterPowerNormalMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st25ru3993.o(i.st25RU3993EnterPowerNormalMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = st25RU3993EnterPowerNormalMode &rArr; st25RU3993ExitPowerDownMode &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>

<P><STRONG><a name="[1af]"></a>st25RU3993EnterPowerNormalRfMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st25ru3993.o(i.st25RU3993EnterPowerNormalRfMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = st25RU3993EnterPowerNormalRfMode &rArr; st25RU3993ExitPowerDownMode &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>

<P><STRONG><a name="[1b0]"></a>st25RU3993EnterPowerStandbyMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, st25ru3993.o(i.st25RU3993EnterPowerStandbyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = st25RU3993EnterPowerStandbyMode &rArr; st25RU3993ExitPowerDownMode &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>

<P><STRONG><a name="[19a]"></a>st25RU3993ExitDirectMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, st25ru3993.o(i.st25RU3993ExitDirectMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = st25RU3993ExitDirectMode &rArr; st25RU3993SingleCommand &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPortNormal
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
</UL>

<P><STRONG><a name="[1b1]"></a>st25RU3993ExitPowerDownMode</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993ExitPowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = st25RU3993ExitPowerDownMode &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993LockPLL
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerStandbyMode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerStandbyMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalRfMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalMode
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
</UL>

<P><STRONG><a name="[1b2]"></a>st25RU3993ExitPowerNormalMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, st25ru3993.o(i.st25RU3993ExitPowerNormalMode))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
</UL>

<P><STRONG><a name="[1b3]"></a>st25RU3993ExitPowerNormalRfMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, st25ru3993.o(i.st25RU3993ExitPowerNormalRfMode))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
</UL>

<P><STRONG><a name="[1b4]"></a>st25RU3993ExitPowerStandbyMode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st25ru3993.o(i.st25RU3993ExitPowerStandbyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = st25RU3993ExitPowerStandbyMode &rArr; st25RU3993ExitPowerDownMode &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
</UL>

<P><STRONG><a name="[19b]"></a>st25RU3993FifoRead</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, st25ru3993.o(i.st25RU3993FifoRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = st25RU3993FifoRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
</UL>

<P><STRONG><a name="[17a]"></a>st25RU3993GetADC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, st25ru3993.o(i.st25RU3993GetADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetRssiLin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
</UL>

<P><STRONG><a name="[156]"></a>st25RU3993GetRSSI</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993GetRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = st25RU3993GetRSSI &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSIMaxSensitive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
</UL>

<P><STRONG><a name="[190]"></a>st25RU3993GetRSSIMaxSensitive</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993GetRSSIMaxSensitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = st25RU3993GetRSSIMaxSensitive &rArr; st25RU3993GetRSSI &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
</UL>

<P><STRONG><a name="[158]"></a>st25RU3993GetReflectedPower</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993GetReflectedPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetADC
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
</UL>

<P><STRONG><a name="[140]"></a>st25RU3993GetSensitivity</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993GetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993GetSensitivity &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventoryData
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigTxRx
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increaseSensitivity
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decreaseSensitivity
</UL>

<P><STRONG><a name="[1ab]"></a>st25RU3993Initialize</STRONG> (Thumb, 560 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = st25RU3993Initialize &rArr; st25RU3993SetBaseFrequency &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ResetDoNotPreserveRegisters
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[ae]"></a>st25RU3993Isr</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993CommandContinuousAddress
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993FifoRead
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitDirectMode
</UL>

<P><STRONG><a name="[1cf]"></a>st25RU3993ReadChipVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, st25ru3993.o(i.st25RU3993ReadChipVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = st25RU3993ReadChipVersion &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
</UL>

<P><STRONG><a name="[1cc]"></a>st25RU3993ResetDoNotPreserveRegisters</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993ResetDoNotPreserveRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = st25RU3993ResetDoNotPreserveRegisters &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[12b]"></a>st25RU3993SetBaseFrequency</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, st25ru3993.o(i.st25RU3993SetBaseFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = st25RU3993SetBaseFrequency &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993LockPLL
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993IsFrequencyChangeNecessary
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeRSSICMD
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[13f]"></a>st25RU3993SetSensitivity</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993SetSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993SetSensitivity &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSIMaxSensitive
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigTxRx
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflectedPowerTooHigh
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increaseSensitivity
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decreaseSensitivity
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[188]"></a>st25RU3993SingleCommand</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, st25ru3993.o(i.st25RU3993SingleCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = st25RU3993SingleCommand &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetADC
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitDirectMode
</UL>

<P><STRONG><a name="[155]"></a>st25RU3993SingleRead</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993SingleRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetADC
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetRssiLin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetSensitivity
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSIMaxSensitive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerStandbyMode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerStandbyMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalRfMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bOpen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bClose
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2QueryMeasureRSSI
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2LockTag
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2KillTag
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Configure
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegisters
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflectedPowerTooHigh
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceTxWhenFalsePositive
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ReadChipVersion
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993LockPLL
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[13d]"></a>st25RU3993SingleWrite</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, st25ru3993.o(i.st25RU3993SingleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeReadST25RU3993
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetRssiLin
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSIMaxSensitive
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerStandbyMode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerStandbyMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalRfMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bOpen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bClose
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2LockTag
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2KillTag
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Configure
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigPA
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflectedPowerTooHigh
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceTxWhenFalsePositive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993LockPLL
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[15b]"></a>st25RU3993TxRxGen2Bytes</STRONG> (Thumb, 720 bytes, Stack size 72 bytes, st25ru3993.o(i.st25RU3993TxRxGen2Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getGen2IntConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponseTimed
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993CommandContinuousAddress
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993FifoRead
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReqRNHandleChar
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Select
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadFromTag
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2QueryMeasureRSSI
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2LockTag
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2KillTag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2AccessTag
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudoRandomContinuousModulation
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etsiModeContinuousModulation
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doContinuousModulation
</UL>

<P><STRONG><a name="[189]"></a>st25RU3993WaitForResponse</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, st25ru3993.o(i.st25RU3993WaitForResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = st25RU3993WaitForResponse
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Initialize
</UL>

<P><STRONG><a name="[1d1]"></a>st25RU3993WaitForResponseTimed</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993WaitForResponseTimed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st25RU3993WaitForResponseTimed
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
</UL>

<P><STRONG><a name="[1ca]"></a>st25RU3993WaitForStartup</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993WaitForStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ReadChipVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ResetDoNotPreserveRegisters
</UL>

<P><STRONG><a name="[16a]"></a>tunerGetReflected</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tuner.o(i.tunerGetReflected))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerMultiHillClimb
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflectedPowerTooHigh
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceTxWhenFalsePositive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectReflectedPowerChange
</UL>

<P><STRONG><a name="[1d3]"></a>tunerMultiHillClimb</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, tuner.o(i.tunerMultiHillClimb))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tunerMultiHillClimb &rArr; tunerOneHillClimb &rArr; tunerClimbOneParam &rArr; detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetTuning
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
</UL>

<P><STRONG><a name="[192]"></a>tunerOneHillClimb</STRONG> (Thumb, 646 bytes, Stack size 40 bytes, tuner.o(i.tunerOneHillClimb))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tunerOneHillClimb &rArr; tunerClimbOneParam &rArr; detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetTuning
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerMultiHillClimb
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
</UL>

<P><STRONG><a name="[142]"></a>tunerSetCap</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tuner.o(i.tunerSetCap))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tunerSetCap &rArr; tunerSetCapCout &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapClen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCin
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callGetSetTuning
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
</UL>

<P><STRONG><a name="[12e]"></a>tunerSetTuning</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tuner.o(i.tunerSetTuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tunerSetTuning &rArr; tunerSetCaps &rArr; tunerSetCapCout &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCaps
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerMultiHillClimb
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyTunerSettingForFreq
</UL>

<P><STRONG><a name="[1aa]"></a>uartInitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart_driver.o(i.uartInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uartInitialize &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxNextPacket
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platformInit
</UL>

<P><STRONG><a name="[1d7]"></a>uartRxNextPacket</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_driver.o(i.uartRxNextPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uartRxNextPacket &rArr; HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartInitialize
</UL>

<P><STRONG><a name="[1d8]"></a>uartRxRead</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, uart_driver.o(i.uartRxRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uartRxRead
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamReceive
</UL>

<P><STRONG><a name="[1bd]"></a>uartStreamHasAnotherPacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_stream_driver.o(i.uartStreamHasAnotherPacket))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[110]"></a>uartStreamInitialize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_stream_driver.o(i.uartStreamInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamDispatcherInit
</UL>

<P><STRONG><a name="[1bc]"></a>uartStreamPacketProcessed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart_stream_driver.o(i.uartStreamPacketProcessed))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>

<P><STRONG><a name="[109]"></a>uartStreamReady</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_stream_driver.o(i.uartStreamReady))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIO
</UL>

<P><STRONG><a name="[10a]"></a>uartStreamReceive</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart_stream_driver.o(i.uartStreamReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uartStreamReceive &rArr; uartRxRead
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartRxRead
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIO
</UL>

<P><STRONG><a name="[10c]"></a>uartStreamTransmit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uart_stream_driver.o(i.uartStreamTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uartStreamTransmit &rArr; uartTxNBytes &rArr; uartTxNextPacket &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNBytes
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StreamDispatcherGetLastError
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIO
</UL>

<P><STRONG><a name="[153]"></a>uartStreamTransmitBuffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart_stream_driver.o(i.uartStreamTransmitBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbGen2TagFound
</UL>

<P><STRONG><a name="[1da]"></a>uartTxBufferDirect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart_driver.o(i.uartTxBufferDirect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1d9]"></a>uartTxNBytes</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart_driver.o(i.uartTxNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uartTxNBytes &rArr; uartTxNextPacket &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNextPacket
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamTransmit
</UL>

<P><STRONG><a name="[1db]"></a>uartTxNextPacket</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, uart_driver.o(i.uartTxNextPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uartTxNextPacket &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartTxNBytes
</UL>

<P><STRONG><a name="[157]"></a>udelay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(i.udelay))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponse
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetADC
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapClen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCin
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForStartup
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993WaitForResponseTimed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ResetDoNotPreserveRegisters
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993LockPLL
</UL>

<P><STRONG><a name="[17c]"></a>uint32ToEbv</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, global.o(i.uint32ToEbv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uint32ToEbv
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2InsertEBV
</UL>

<P><STRONG><a name="[1ce]"></a>writeReadST25RU3993Isr</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, st25ru3993.o(i.writeReadST25RU3993Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = writeReadST25RU3993Isr &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUnselect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSelect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
</UL>

<P><STRONG><a name="[1b8]"></a>writeRegister</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, appl_commands.o(i.writeRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = writeRegister &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processReceivedPackets
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14e]"></a>addToTuningTable</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, appl_commands.o(i.addToTuningTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = addToTuningTable
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTunerTable
</UL>

<P><STRONG><a name="[126]"></a>antennaPower</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, appl_commands.o(i.antennaPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = antennaPower &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerReset
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTuningIndexFromFreq
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continueCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callAntennaPower
</UL>

<P><STRONG><a name="[12d]"></a>applyTunerSettingForFreq</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, appl_commands.o(i.applyTunerSettingForFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = applyTunerSettingForFreq &rArr; tunerSetTuning &rArr; tunerSetCaps &rArr; tunerSetCapCout &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetTuning
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTuningIndexFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
</UL>

<P><STRONG><a name="[80]"></a>cbGen2TagFound</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, appl_commands.o(i.cbGen2TagFound))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = cbGen2TagFound &rArr; callInventoryData &rArr; st25RU3993GetSensitivity &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamTransmitBuffer
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventoryData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands.o(i.inventoryGen2)
</UL>
<P><STRONG><a name="[13a]"></a>changeFreq</STRONG> (Thumb, 1032 bytes, Stack size 56 bytes, appl_commands.o(i.changeFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = changeFreq &rArr; pseudoRandomContinuousModulation &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetTuning
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetReflectedPower
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSI
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerReset
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randomizeFrequencies
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTunedFrequencies
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pseudoRandomContinuousModulation
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTuningIndexFromFreq
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etsiModeContinuousModulation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continueCheckTimeout
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkAndSetSession
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyTunerSettingForFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callChangeFreq
</UL>

<P><STRONG><a name="[13c]"></a>checkAndSetSession</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, appl_commands.o(i.checkAndSetSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = checkAndSetSession &rArr; gen2Open &rArr; gen2Configure &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bOpen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bClose
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Open
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Close
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSelectTag
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callRSSIMeasureCMD
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callLockUnlockTag
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callKillTag
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callGenericCommand
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigGen2
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doCyclicInventory
</UL>

<P><STRONG><a name="[81]"></a>continueCheckTimeout</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, appl_commands.o(i.continueCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = continueCheckTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTagMemGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands.o(i.inventoryGen2)
</UL>
<P><STRONG><a name="[164]"></a>decreaseSensitivity</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, appl_commands.o(i.decreaseSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = decreaseSensitivity &rArr; st25RU3993SetSensitivity &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
</UL>

<P><STRONG><a name="[15d]"></a>etsiModeContinuousModulation</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, appl_commands.o(i.etsiModeContinuousModulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = etsiModeContinuousModulation &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerValue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doContinuousModulation
</UL>

<P><STRONG><a name="[147]"></a>executeRSSICMD</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, appl_commands.o(i.executeRSSICMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = executeRSSICMD &rArr; gen2QueryMeasureRSSI &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2QueryMeasureRSSI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSelectsGen2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTuningIndexFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callRSSIMeasureCMD
</UL>

<P><STRONG><a name="[82]"></a>gen2ReadTID</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, appl_commands.o(i.gen2ReadTID))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gen2ReadTID &rArr; gen2ReadFromTag &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadFromTag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appl_commands.o(i.inventoryGen2)
</UL>
<P><STRONG><a name="[141]"></a>genericCommand</STRONG> (Thumb, 302 bytes, Stack size 256 bytes, appl_commands.o(i.genericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = genericCommand &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertBitStream
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2AccessTag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callGenericCommand
</UL>

<P><STRONG><a name="[12a]"></a>getTuningIndexFromFreq</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, appl_commands.o(i.getTuningIndexFromFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = getTuningIndexFromFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeRSSICMD
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyTunerSettingForFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
</UL>

<P><STRONG><a name="[18f]"></a>hopChannelRelease</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, appl_commands.o(i.hopChannelRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = hopChannelRelease &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;killTagGen2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
</UL>

<P><STRONG><a name="[18d]"></a>hopFrequencies</STRONG> (Thumb, 674 bytes, Stack size 48 bytes, appl_commands.o(i.hopFrequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = hopFrequencies &rArr; tunerOneHillClimb &rArr; tunerClimbOneParam &rArr; detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetRSSIMaxSensitive
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerValue
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtcTimerReset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTunedFrequency
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reflectedPowerTooHigh
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTuningIndexFromFreq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyTunerSettingForFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;killTagGen2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
</UL>

<P><STRONG><a name="[194]"></a>increaseSensitivity</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, appl_commands.o(i.increaseSensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = increaseSensitivity &rArr; st25RU3993SetSensitivity &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
</UL>

<P><STRONG><a name="[145]"></a>killTagGen2</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, appl_commands.o(i.killTagGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = killTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2KillTag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callKillTag
</UL>

<P><STRONG><a name="[146]"></a>lockUnlockTagGen2</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, appl_commands.o(i.lockUnlockTagGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lockUnlockTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2LockTag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2AccessTag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callLockUnlockTag
</UL>

<P><STRONG><a name="[16f]"></a>performSelectsGen2</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, appl_commands.o(i.performSelectsGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = performSelectsGen2 &rArr; gen2Select &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Select
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeRSSICMD
</UL>

<P><STRONG><a name="[18e]"></a>powerAndSelectTagGen2</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, appl_commands.o(i.powerAndSelectTagGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Configure
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;performSelectsGen2
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readFromTagGen2
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockUnlockTagGen2
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;killTagGen2
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;genericCommand
</UL>

<P><STRONG><a name="[129]"></a>powerDownReader</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, appl_commands.o(i.powerDownReader))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerStandbyMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalRfMode
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerNormalMode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterPowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCommands
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTuning
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSelectTag
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callLockUnlockTag
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callKillTag
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callEraseTag
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigTxRx
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigGen2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
</UL>

<P><STRONG><a name="[127]"></a>powerUpReader</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, appl_commands.o(i.powerUpReader))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = powerUpReader &rArr; st25RU3993ExitPowerStandbyMode &rArr; st25RU3993ExitPowerDownMode &rArr; st25RU3993WaitForStartup &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerStandbyMode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerNormalRfMode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerNormalMode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inventoryGen2
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCommands
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag6B
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTuning
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSelectTag
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag6B
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callRSSIMeasureCMD
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callLockUnlockTag
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callKillTag
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callInventory6B
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callEraseTag
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigTxRx
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callConfigGen2
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readerConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;antennaPower
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doContinuousModulation
</UL>

<P><STRONG><a name="[15c]"></a>pseudoRandomContinuousModulation</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, appl_commands.o(i.pseudoRandomContinuousModulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pseudoRandomContinuousModulation &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doContinuousModulation
</UL>

<P><STRONG><a name="[148]"></a>readFromTagGen2</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, appl_commands.o(i.readFromTagGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = readFromTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readU32FromLittleEndianBuffer
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadFromTag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2AccessTag
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continueCheckTimeout
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReadFromTag
</UL>

<P><STRONG><a name="[14a]"></a>readerConfig</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, appl_commands.o(i.readerConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = readerConfig &rArr; powerDownReader &rArr; st25RU3993EnterPowerDownMode &rArr; st25RU3993AntennaPower &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerUpReader
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerDownReader
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callReaderConfig
</UL>

<P><STRONG><a name="[191]"></a>reflectedPowerTooHigh</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, appl_commands.o(i.reflectedPowerTooHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = reflectedPowerTooHigh &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
</UL>

<P><STRONG><a name="[15a]"></a>resetTunedFrequencies</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, appl_commands.o(i.resetTunedFrequencies))
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initCommands
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeFreq
</UL>

<P><STRONG><a name="[14b]"></a>selectTagGen2</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, appl_commands.o(i.selectTagGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = selectTagGen2
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callSelectTag
</UL>

<P><STRONG><a name="[193]"></a>setTunedFrequency</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, appl_commands.o(i.setTunedFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setTunedFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tuning
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
</UL>

<P><STRONG><a name="[14f]"></a>tuning</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, appl_commands.o(i.tuning))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tuning &rArr; tunerMultiHillClimb &rArr; tunerOneHillClimb &rArr; tunerClimbOneParam &rArr; detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerMultiHillClimb
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetSensitivity
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993AntennaPower
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTunedFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callTuning
</UL>

<P><STRONG><a name="[1dc]"></a>writeTagMemGen2</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, appl_commands.o(i.writeTagMemGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = writeTagMemGen2 &rArr; gen2WriteWordToTag &rArr; gen2ReqRNHandleChar &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadFromTag
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;continueCheckTimeout
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToTagGen2
</UL>

<P><STRONG><a name="[150]"></a>writeToTagGen2</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, appl_commands.o(i.writeToTagGen2))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = writeToTagGen2 &rArr; powerAndSelectTagGen2 &rArr; gen2SearchForTags &rArr; gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readU32FromLittleEndianBuffer
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2AccessTag
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeTagMemGen2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerAndSelectTagGen2
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopFrequencies
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hopChannelRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callWriteToTag
</UL>

<P><STRONG><a name="[177]"></a>gen2GetAgcRssiLog</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gen2.o(i.gen2GetAgcRssiLog))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gen2GetAgcRssiLog &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2QueryMeasureRSSI
</UL>

<P><STRONG><a name="[179]"></a>gen2GetRssiLin</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, gen2.o(i.gen2GetRssiLin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = gen2GetRssiLin &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993GetADC
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2QueryMeasureRSSI
</UL>

<P><STRONG><a name="[17b]"></a>gen2InsertEBV</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, gen2.o(i.gen2InsertEBV))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gen2InsertEBV &rArr; insertBitStream
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint32ToEbv
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertBitStream
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Select
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2ReadFromTag
</UL>

<P><STRONG><a name="[180]"></a>gen2PrepareQueryCmd</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, gen2.o(i.gen2PrepareQueryCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gen2PrepareQueryCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SlotAutoAck
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2Slot
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2QueryMeasureRSSI
</UL>

<P><STRONG><a name="[176]"></a>gen2ReqRNHandleChar</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gen2.o(i.gen2ReqRNHandleChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = gen2ReqRNHandleChar &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2WriteWordToTag
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2KillTag
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2AccessTag
</UL>

<P><STRONG><a name="[184]"></a>gen2Slot</STRONG> (Thumb, 456 bytes, Stack size 72 bytes, gen2.o(i.gen2Slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = gen2Slot &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2PrepareQueryCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetRssiLin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetAgcRssiLog
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCrc16
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[185]"></a>gen2SlotAutoAck</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, gen2.o(i.gen2SlotAutoAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gen2SlotAutoAck &rArr; st25RU3993TxRxGen2Bytes &rArr; st25RU3993ContinuousWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2PrepareQueryCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetRssiLin
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2GetAgcRssiLog
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCrc16
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993TxRxGen2Bytes
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen2SearchForTags
</UL>

<P><STRONG><a name="[19e]"></a>iso6bPrepareByte</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, iso6b.o(i.iso6bPrepareByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = iso6bPrepareByte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSelect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareCRC
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
</UL>

<P><STRONG><a name="[19d]"></a>iso6bPrepareCRC</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, iso6b.o(i.iso6bPrepareCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = iso6bPrepareCRC &rArr; iso6bPrepareByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareByte
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSelect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
</UL>

<P><STRONG><a name="[19f]"></a>iso6bPreparePreambleDelimiter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iso6b.o(i.iso6bPreparePreambleDelimiter))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSelect
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bWrite
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bRead
</UL>

<P><STRONG><a name="[198]"></a>iso6bSendCmd</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, iso6b.o(i.iso6bSendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iso6bSendCmd &rArr; iso6bPrepareCRC &rArr; iso6bPrepareByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPreparePreambleDelimiter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareCRC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareByte
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCrc16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendSuccess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendResend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendFail
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
</UL>

<P><STRONG><a name="[83]"></a>iso6bSendFail</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iso6b.o(i.iso6bSendFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iso6bSendFail &rArr; iso6bSendCmd &rArr; iso6bPrepareCRC &rArr; iso6bPrepareByte
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iso6b.o(i.iso6bInventoryRound)
</UL>
<P><STRONG><a name="[85]"></a>iso6bSendResend</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iso6b.o(i.iso6bSendResend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iso6bSendResend &rArr; iso6bSendCmd &rArr; iso6bPrepareCRC &rArr; iso6bPrepareByte
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iso6b.o(i.iso6bInventoryRound)
</UL>
<P><STRONG><a name="[199]"></a>iso6bSendSelect</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, iso6b.o(i.iso6bSendSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iso6bSendSelect &rArr; iso6bPrepareCRC &rArr; iso6bPrepareByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPreparePreambleDelimiter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareCRC
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bPrepareByte
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcCrc16
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bbRun
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bInventoryRound
</UL>

<P><STRONG><a name="[84]"></a>iso6bSendSuccess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, iso6b.o(i.iso6bSendSuccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = iso6bSendSuccess &rArr; iso6bSendCmd &rArr; iso6bPrepareCRC &rArr; iso6bPrepareByte
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iso6bSendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> iso6b.o(i.iso6bInventoryRound)
</UL>
<P><STRONG><a name="[1cd]"></a>st25RU3993IsFrequencyChangeNecessary</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993IsFrequencyChangeNecessary))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993IsFrequencyChangeNecessary &rArr; st25RU3993ContinuousRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
</UL>

<P><STRONG><a name="[1cb]"></a>st25RU3993LockPLL</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, st25ru3993.o(i.st25RU3993LockPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = st25RU3993LockPLL &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SetBaseFrequency
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ExitPowerDownMode
</UL>

<P><STRONG><a name="[1c9]"></a>writeReadST25RU3993</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, st25ru3993.o(i.writeReadST25RU3993))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUnselect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSelect
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousRead
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleCommand
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993ContinuousWrite
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993Isr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993CommandContinuousAddress
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993FifoRead
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993EnterDirectMode
</UL>

<P><STRONG><a name="[10b]"></a>processReceivedPackets</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, stream_dispatcher.o(i.processReceivedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = processReceivedPackets &rArr; writeRegister &rArr; st25RU3993SingleWrite &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloaderEnterAndReset
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeRegister
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegisters
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRegister
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commands
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamPacketProcessed
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uartStreamHasAnotherPacket
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiUnselect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSelect
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessIO
</UL>

<P><STRONG><a name="[166]"></a>detectFalsePositive</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, tuner.o(i.detectFalsePositive))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCaps
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceTxWhenFalsePositive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectReflectedPowerChange
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
</UL>

<P><STRONG><a name="[167]"></a>detectReflectedPowerChange</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tuner.o(i.detectReflectedPowerChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = detectReflectedPowerChange &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCaps
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectFalsePositive
</UL>

<P><STRONG><a name="[169]"></a>reduceTxWhenFalsePositive</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, tuner.o(i.reduceTxWhenFalsePositive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerClimbOneParam
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectFalsePositive
</UL>

<P><STRONG><a name="[1c3]"></a>replaceTuningTable</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, tuner.o(i.replaceTuningTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = replaceTuningTable
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDefaultTuningTable
</UL>

<P><STRONG><a name="[1d2]"></a>tunerClimbOneParam</STRONG> (Thumb, 328 bytes, Stack size 56 bytes, tuner.o(i.tunerClimbOneParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tunerClimbOneParam &rArr; detectFalsePositive &rArr; reduceTxWhenFalsePositive &rArr; tunerGetReflected &rArr; st25RU3993GetReflectedPower &rArr; st25RU3993GetADC &rArr; st25RU3993SingleRead &rArr; st25RU3993Isr &rArr; writeReadST25RU3993 &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCap
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerGetReflected
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleWrite
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st25RU3993SingleRead
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reduceTxWhenFalsePositive
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectFalsePositive
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerOneHillClimb
</UL>

<P><STRONG><a name="[1d5]"></a>tunerSetCapCin</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tuner.o(i.tunerSetCapCin))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tunerSetCapCin &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCaps
</UL>

<P><STRONG><a name="[1d6]"></a>tunerSetCapClen</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tuner.o(i.tunerSetCapClen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tunerSetCapClen &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCaps
</UL>

<P><STRONG><a name="[1d4]"></a>tunerSetCapCout</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tuner.o(i.tunerSetCapCout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tunerSetCapCout &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCap
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCaps
</UL>

<P><STRONG><a name="[168]"></a>tunerSetCaps</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tuner.o(i.tunerSetCaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tunerSetCaps &rArr; tunerSetCapCout &rArr; spiTxRx &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCout
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapClen
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetCapCin
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tunerSetTuning
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectReflectedPowerChange
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detectFalsePositive
</UL>

<P><STRONG><a name="[78]"></a>SPI_AbortRx_ISR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_AbortRx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_AbortRx_ISR &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Abort)
</UL>
<P><STRONG><a name="[77]"></a>SPI_AbortTx_ISR</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32l4xx_hal_spi.o(i.SPI_AbortTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_AbortTx_ISR &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_spi.o(i.HAL_SPI_Abort)
</UL>
<P><STRONG><a name="[d1]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
</UL>

<P><STRONG><a name="[d2]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortTx_ISR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortRx_ISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
</UL>

<P><STRONG><a name="[d3]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32l4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_AbortRx_ISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Abort
</UL>

<P><STRONG><a name="[e3]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e1]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e2]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32l4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[79]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[7c]"></a>UART_DMAError</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32l4xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
<LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[7a]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[7b]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[7d]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[7e]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l4xx_hal_uart.o(i.UART_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMATxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l4xx_hal_uart.o(i.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[ef]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[118]"></a>UART_EndTxTransfer</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l4xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[c1]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc.o(i.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[bc]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[bd]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32l4xx_hal_rcc_ex.o(i.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ab]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[ac]"></a>FLASH_Program_Fast</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l4xx_hal_flash.o(i.FLASH_Program_Fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_Fast
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[a7]"></a>FLASH_MassErase</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32l4xx_hal_flash_ex.o(i.FLASH_MassErase))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[a4]"></a>DMA_SetConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32l4xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[ba]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[121]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[124]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[123]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
